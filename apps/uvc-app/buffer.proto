syntax = "proto3";

package uvc_payload;

enum Status   // This must match precisely the Status list from status_definitions.h
{
  OK = 0;
  BUSY = 1;
  UNREACHABLE = 2;
  INVALID_ARGUMENT = 3;
  UNAVAILABLE = 4;
  GENERIC_ERROR = 5;
}

message StorageInfo
{
  string name = 10;
  int32 id = 20;
}

message TemperatureSensorInfo
{
  string name = 10;
  int32 id = 20;
}

message SensorsInfo
{
  repeated StorageInfo storages = 10;               // Information about available storages
  repeated TemperatureSensorInfo temp_sensors = 20; // Information about available temperature sensors
}

message DepthSensorFrameContent
{
  string type = 10;
  uint32 width = 20;
  uint32 height = 30;
}

message DepthSensorFrameType
{
  string type = 10;
  repeated DepthSensorFrameContent depthSensorFrameContent = 20;
  uint32 width = 30;
  uint32 height = 40;
}

message DepthSensorFrameTypeVector
{
  repeated DepthSensorFrameType depthSensorFrameTypes = 10;
}

message ClientRequest
{
  string func_name = 10;                // Name of an API function
  repeated int32 func_int32_param = 20; // List of function parameters of type int32
  repeated float func_float_param = 30; // List of function parameters of type float
  repeated bytes func_bytes_param = 40; // List of function parameters of type byte-array
  DepthSensorFrameType frame_type = 50; // Frame type information
}

message ServerResponse
{
  Status status = 10;                                        // Status of operation requested by the client request
  repeated int32 int32_payload = 20;                         // List of structures of type int32 for transporting data back to client
  repeated float float_payload = 30;                         // List of structures of type float for transporting data back to client
  repeated bytes bytes_payload = 40;                         // List of structures of type byte-array for transporting data back to client
  repeated DepthSensorFrameType available_frame_types = 50;  // List of supported frame types
  SensorsInfo sensors_info = 60;                             // List of information about existing devices on the same platform as the server
  string message = 70;                                       // Additional message (if any)
}

From 3068e59bed762137069047ae4db2bd3bcacb5793 Mon Sep 17 00:00:00 2001
From: Bogdan Togorean <bogdan.togorean@analog.com>
Date: Fri, 16 Apr 2021 09:01:34 +0300
Subject: [PATCH 12/15] usb: typec: tcpm: Remove tcpm port reset

This patch is required to prevent VBUS turning off by the HOST when PD negociation is happening

Signed-off-by: Bogdan Togorean <bogdan.togorean@analog.com>
---
 drivers/usb/typec/tcpm/tcpci.c | 19 +++++++++++--------
 drivers/usb/typec/tcpm/tcpm.c  | 31 ++++++++++++-------------------
 include/linux/usb/pd.h         |  2 +-
 3 files changed, 24 insertions(+), 28 deletions(-)

diff --git a/drivers/usb/typec/tcpm/tcpci.c b/drivers/usb/typec/tcpm/tcpci.c
index 93234ec601f0..686f66e70a5b 100644
--- a/drivers/usb/typec/tcpm/tcpci.c
+++ b/drivers/usb/typec/tcpm/tcpci.c
@@ -113,13 +113,15 @@ static int tcpci_start_toggling(struct tcpc_dev *tcpc,
 {
 	int ret;
 	struct tcpci *tcpci = tcpc_to_tcpci(tcpc);
-	unsigned int reg = TCPC_ROLE_CTRL_DRP;
-
-	/* Handle vendor drp toggling */
-	if (tcpci->data->start_drp_toggling) {
-		ret = tcpci->data->start_drp_toggling(tcpci, tcpci->data, cc);
-		if (ret < 0)
-			return ret;
+	unsigned int reg = 0;
+	if (port_type == TYPEC_PORT_DRP) {
+		/* Handle vendor drp toggling */
+		if (tcpci->data->start_drp_toggling) {
+			ret = tcpci->data->start_drp_toggling(tcpci, tcpci->data, cc);
+			if (ret < 0)
+				return ret;
+		}
+		reg = TCPC_ROLE_CTRL_DRP;
 	}
 
 	switch (cc) {
@@ -368,6 +370,7 @@ static int tcpci_set_vbus(struct tcpc_dev *tcpc, bool source, bool sink)
 	struct tcpci *tcpci = tcpc_to_tcpci(tcpc);
 	int ret;
 
+#if 0
 	if (tcpci->data->set_vbus) {
 		ret = tcpci->data->set_vbus(tcpci, tcpci->data, source, sink);
 		/* Bypass when ret > 0 */
@@ -407,7 +410,7 @@ static int tcpci_set_vbus(struct tcpc_dev *tcpc, bool source, bool sink)
 		if (ret < 0)
 			return ret;
 	}
-
+#endif
 	return 0;
 }
 
diff --git a/drivers/usb/typec/tcpm/tcpm.c b/drivers/usb/typec/tcpm/tcpm.c
index e49d8dbc2234..ef2bb525d90a 100644
--- a/drivers/usb/typec/tcpm/tcpm.c
+++ b/drivers/usb/typec/tcpm/tcpm.c
@@ -437,7 +437,7 @@ static enum tcpm_state tcpm_default_state(struct tcpm_port *port)
 			return SRC_UNATTACHED;
 		/* Fall through to return SRC_UNATTACHED */
 	} else if (port->port_type == TYPEC_PORT_SNK) {
-		return SNK_UNATTACHED;
+		return SNK_ATTACHED;
 	}
 	return SRC_UNATTACHED;
 }
@@ -770,7 +770,7 @@ static u32 tcpm_get_current_limit(struct tcpm_port *port)
 		if (port->tcpc->get_current_limit)
 			limit = port->tcpc->get_current_limit(port->tcpc);
 		else
-			limit = 0;
+			limit = 3000;
 		break;
 	}
 
@@ -2733,9 +2733,9 @@ static int tcpm_init_vbus(struct tcpm_port *port)
 {
 	int ret;
 
-	ret = port->tcpc->set_vbus(port->tcpc, false, false);
+	ret = port->tcpc->set_vbus(port->tcpc, false, true);
 	port->vbus_source = false;
-	port->vbus_charge = false;
+	port->vbus_charge = true;
 	return ret;
 }
 
@@ -2743,7 +2743,7 @@ static int tcpm_init_vconn(struct tcpm_port *port)
 {
 	int ret;
 
-	ret = port->tcpc->set_vconn(port->tcpc, false);
+	ret = port->tcpc->set_vconn(port->tcpc, true);
 	port->vconn_role = TYPEC_SINK;
 	return ret;
 }
@@ -3234,7 +3234,7 @@ static void run_state_machine(struct tcpm_port *port)
 		if (!port->non_pd_role_swap)
 			tcpm_swap_complete(port, -ENOTCONN);
 		tcpm_pps_complete(port, -ENOTCONN);
-		tcpm_snk_detach(port);
+		//tcpm_snk_detach(port);
 		if (tcpm_start_toggling(port, TYPEC_CC_RD)) {
 			tcpm_set_state(port, TOGGLING, 0);
 			break;
@@ -3368,7 +3368,7 @@ static void run_state_machine(struct tcpm_port *port)
 	case SNK_WAIT_CAPABILITIES:
 		ret = port->tcpc->set_pd_rx(port->tcpc, true);
 		if (ret < 0) {
-			tcpm_set_state(port, SNK_READY, 0);
+			tcpm_set_state(port, SNK_READY, PD_T_SINK_WAIT_CAP);
 			break;
 		}
 		/*
@@ -3377,14 +3377,7 @@ static void run_state_machine(struct tcpm_port *port)
 		 * were already in a stable contract before this boot.
 		 * Do this only once.
 		 */
-		if (port->vbus_never_low) {
-			port->vbus_never_low = false;
-			tcpm_set_state(port, SOFT_RESET_SEND,
-				       PD_T_SINK_WAIT_CAP);
-		} else {
-			tcpm_set_state(port, hard_reset_state(port),
-				       PD_T_SINK_WAIT_CAP);
-		}
+		tcpm_set_state(port, SNK_READY, 0);
 		break;
 	case SNK_NEGOTIATE_CAPABILITIES:
 		port->pd_capable = true;
@@ -3506,9 +3499,9 @@ static void run_state_machine(struct tcpm_port *port)
 		break;
 	case SNK_HARD_RESET_SINK_OFF:
 		memset(&port->pps_data, 0, sizeof(port->pps_data));
-		tcpm_set_vconn(port, false);
+		//tcpm_set_vconn(port, false);
 		if (port->pd_capable)
-			tcpm_set_charge(port, false);
+			//tcpm_set_charge(port, false);
 		tcpm_set_roles(port, port->self_powered, TYPEC_SINK,
 			       tcpm_data_role_for_sink(port));
 		/*
@@ -4664,7 +4657,7 @@ static void tcpm_init(struct tcpm_port *port)
 
 	port->tcpc->init(port->tcpc);
 
-	tcpm_reset_port(port);
+	//tcpm_reset_port(port);
 
 	/*
 	 * XXX
@@ -4684,7 +4677,7 @@ static void tcpm_init(struct tcpm_port *port)
 	 * Some adapters need a clean slate at startup, and won't recover
 	 * otherwise. So do not try to be fancy and force a clean disconnect.
 	 */
-	tcpm_set_state(port, PORT_RESET, 0);
+	//tcpm_set_state(port, PORT_RESET, 0);
 }
 
 static int tcpm_port_type_set(struct typec_port *p, enum typec_port_type type)
diff --git a/include/linux/usb/pd.h b/include/linux/usb/pd.h
index 3a805e2ecbc9..c5184ef96769 100644
--- a/include/linux/usb/pd.h
+++ b/include/linux/usb/pd.h
@@ -459,7 +459,7 @@ static inline unsigned int rdo_max_power(u32 rdo)
 #define PD_T_RECEIVER_RESPONSE	15	/* 15ms max */
 #define PD_T_SOURCE_ACTIVITY	45
 #define PD_T_SINK_ACTIVITY	135
-#define PD_T_SINK_WAIT_CAP	240
+#define PD_T_SINK_WAIT_CAP	620
 #define PD_T_PS_TRANSITION	500
 #define PD_T_SRC_TRANSITION	35
 #define PD_T_DRP_SNK		40
-- 
2.32.0

